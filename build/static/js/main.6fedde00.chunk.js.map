{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["sampleObservationList","title","image","description","key","queryString","window","location","search","username","URLSearchParams","get","Observation","props","sm","md","lg","className","style","paddingBottom","src","top","body","App","useState","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","Observations","map","observation","console","log","results","taxon","name","photos","url","place_guess","paddingTop","paddingLeft","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAcMA,EAAwB,CAC5B,CAACC,MAAM,mBAAoBC,MAAM,oDAAqDC,YAAY,cAAeC,IAAI,GACrH,CAACH,MAAM,mBAAoBC,MAAM,oDAAqDC,YAAY,cAAeC,IAAI,GACrH,CAACH,MAAM,mBAAoBC,MAAM,oDAAqDC,YAAY,cAAeC,IAAI,GACrH,CAACH,MAAM,mBAAoBC,MAAM,oDAAqDC,YAAY,cAAeC,IAAI,GACrH,CAACH,MAAM,mBAAoBC,MAAM,oDAAqDC,YAAY,cAAeC,IAAI,GACrH,CAACH,MAAM,mBAAoBC,MAAM,oDAAqDC,YAAY,cAAeC,IAAI,GACrH,CAACH,MAAM,mBAAoBC,MAAM,oDAAqDC,YAAY,cAAeC,IAAI,IAGjHC,EAAcC,OAAOC,SAASC,OAE9BC,EADY,IAAIC,gBAAgBL,GACXM,IAAI,YAM/B,SAASC,EAAYC,GACnB,OACE,cAAC,IAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAtB,SACE,qBAAKC,UAAU,cAAcC,MAAO,CAAEC,cAAe,QAArD,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASC,IAAKP,EAAMX,MAAOmB,IAAI,SAC/B,eAAC,IAAD,WACE,cAAC,IAAD,UAAYR,EAAMZ,QAClB,4BAAIY,EAAMS,iBA2GPC,MAjGf,WAAe,MAcaC,mBAAS,MAdtB,mBAcNC,EAdM,KAcCC,EAdD,OAemBF,oBAAS,GAf5B,mBAeNG,EAfM,KAeIC,EAfJ,OAgBaJ,mBAAS,IAhBtB,mBAgBNK,EAhBM,KAgBCC,EAhBD,KAuCb,GAlBAC,qBAAU,WACRC,MAAM,4EAA8EvB,GACjFwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCR,GAAY,GACZE,EAASM,MAKX,SAACX,GACCG,GAAY,GACZF,EAASD,QAGd,IAEAA,EACD,OAAO,0CAAaA,EAAMY,WACrB,GAAKV,EAEL,CAML,IAAIW,EAAe,wBAuBnB,OArBY,GAATT,EACDS,EAAetC,EAAsBuC,KAAI,SAACC,GAAD,OACvC,cAAC5B,EAAD,CAEEX,MAAOuC,EAAYvC,MACnBC,MAAOsC,EAAYtC,MACnBoB,KAAMkB,EAAYrC,aAHbqC,EAAYpC,SAOrBqC,QAAQC,IAAIb,GACZS,EAAeT,EAAMc,QAAQJ,KAAI,SAAAC,GAAW,OAC1C,cAAC5B,EAAD,CAEEX,MAAOuC,EAAYI,MAAMC,KACzB3C,MAAOsC,EAAYM,OAAO,GAAGC,IAC7BzB,KAAMkB,EAAYQ,aAHbR,EAAYpC,SASrB,qBAAKa,UAAU,MAAf,SACE,eAAC,IAAD,CAAWA,UAAU,uBAAwBC,MAAO,CAAEC,cAAe,QAArE,UACE,cAAC,IAAD,UACE,oBAAID,MAAO,CAAEC,cAAe,OAAQ8B,WAAY,OAAQC,YAAa,QAArE,oBAEF,cAAC,IAAD,UACE,cAAC,IAAD,CAAKpC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAtB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUE,MAAO,CAACiC,UAAW,QAA7B,SACE,cAAC,IAAD,UAAY1C,YAKpB,cAAC,IAAD,UACE,oBAAIS,MAAO,CAAEC,cAAe,OAAQ8B,WAAY,OAAQC,YAAa,QAArE,4BAEF,cAAC,IAAD,UAAMZ,SAhDZ,OAAO,8CChFIc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,cCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6fedde00.chunk.js","sourcesContent":["import {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardImg,\n  CardBody,\n  CardFooter,\n  CardSubtitle,\n  Button\n} from \"shards-react\";\nimport { Container, Row, Col} from \"shards-react\";\nimport React, { useEffect, useState } from \"react\";\n\n// Sample observations for testing\nconst sampleObservationList = [\n  {title:\"Observation Name\", image:\"https://loremflickr.com/300/200/wildlife?random=1\", description:\"Description\", key:1},\n  {title:\"Observation Name\", image:\"https://loremflickr.com/300/200/wildlife?random=2\", description:\"Description\", key:2},\n  {title:\"Observation Name\", image:\"https://loremflickr.com/300/200/wildlife?random=3\", description:\"Description\", key:3},\n  {title:\"Observation Name\", image:\"https://loremflickr.com/300/200/wildlife?random=4\", description:\"Description\", key:4},\n  {title:\"Observation Name\", image:\"https://loremflickr.com/300/200/wildlife?random=5\", description:\"Description\", key:5},\n  {title:\"Observation Name\", image:\"https://loremflickr.com/300/200/wildlife?random=6\", description:\"Description\", key:6},\n  {title:\"Observation Name\", image:\"https://loremflickr.com/300/200/wildlife?random=7\", description:\"Description\", key:7}\n];\n\nconst queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\nconst username = urlParams.get('username');\n\n//drmcmillan_bms\n\n\n// Observation element\nfunction Observation(props) {\n  return (\n    <Col sm=\"6\" md=\"4\" lg=\"3\">\n      <div className=\"Observation\" style={{ paddingBottom: \"30px\"}}>\n        <Card>\n          <CardImg src={props.image} top=\"true\"/>\n          <CardBody>\n            <CardTitle>{props.title}</CardTitle>\n            <p>{props.body}</p>\n          </CardBody>\n        </Card>\n      </div>\n    </Col>\n  );\n}\n\n\n\nfunction App() {\n\n  // Takes in the observations, and maps them to a series of <Observation>\n  \n  /*\n  var Observations = GetObservations().map((observation) =>\n    <Observation\n      key={observation.key}\n      title={observation.title}\n      image={observation.image}\n      body={observation.description}\n    />\n  );  */\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"https://api.inaturalist.org/v1/observations/?page=1&per_page=100&user_id=\" + username)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  if(error){\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n\n    //console.log(items.results);\n\n\n    \n    var Observations = <div></div>;\n    \n    if(items == 0){\n      Observations = sampleObservationList.map((observation) =>\n        <Observation\n          key={observation.key}\n          title={observation.title}\n          image={observation.image}\n          body={observation.description}\n        />\n      ); \n    } else {\n      console.log(items);\n      Observations = items.results.map(observation =>\n        <Observation\n          key={observation.key}\n          title={observation.taxon.name}\n          image={observation.photos[0].url}\n          body={observation.place_guess}\n        />\n      ); \n    }  \n\n    return (\n      <div className=\"App\">\n        <Container className=\"dr-example-container\"  style={{ paddingBottom: \"20px\"}}>\n          <Row>\n            <h1 style={{ paddingBottom: \"20px\", paddingTop: \"40px\", paddingLeft: \"10px\"}}>User</h1>\n          </Row>\n          <Row>\n            <Col sm=\"6\" md=\"4\" lg=\"4\">\n              <Card>\n                <CardBody style={{marginTop: \"10px\"}}>\n                  <CardTitle>{username}</CardTitle>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <h1 style={{ paddingBottom: \"20px\", paddingTop: \"60px\", paddingLeft: \"10px\"}}>Observations</h1>\n          </Row>\n          <Row>{Observations}</Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Alert } from \"shards-react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}